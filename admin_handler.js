// admin_handler.js
const db = require('./database');
const stateManager = require('./state_manager');
async function showAdminMenu(sender_psid, sendText) { const menu = `Admin Menu:\nType 1: View reference numbers\nType 2: Add bulk accounts\nType 3: Edit mod details\nType 4: Add a reference number\nType 5: Edit admin info\nType 6: Edit reference numbers\nType 7: Add a new mod`; await sendText(sender_psid, menu); stateManager.clearUserState(sender_psid); }
async function handleViewReferences(sender_psid, sendText) { const refs = await db.getAllReferences(); if (!refs || refs.length === 0) return sendText(sender_psid, "No reference numbers found."); let response = "Reference Numbers Log:\n\n"; refs.forEach(r => { response += `Ref: ${r.ref_number}\nMod: ${r.mod_name} | User: ${r.user_id}\n\n`; }); await sendText(sender_psid, response); }
async function promptForBulkAccounts(sender_psid, sendText) { await sendText(sender_psid, `Please specify the mod ID and accounts.\nFormat: Mod [ID], account1:pass1, account2:pass2`); stateManager.setUserState(sender_psid, 'awaiting_bulk_accounts'); }
async function processBulkAccounts(sender_psid, text, sendText) { try { const parts = text.split(',').map(p => p.trim()); const modIdPart = parts.shift(); const modId = parseInt(modIdPart.replace('mod', '').trim()); if (isNaN(modId) || !(await db.getModById(modId))) throw new Error("Invalid Mod ID."); const accounts = parts.map(acc => { const [u, p] = acc.split(':'); if (!u || !p) return null; return { username: u.trim(), password: p.trim() }; }).filter(Boolean); if (accounts.length === 0) throw new Error("No valid accounts provided."); await db.addBulkAccounts(modId, accounts); await sendText(sender_psid, `${accounts.length} accounts added successfully for Mod ${modId}.`); } catch (e) { await sendText(sender_psid, `Invalid format or Mod ID. Error: ${e.message}`); } finally { stateManager.clearUserState(sender_psid); } }
async function promptForEditMod(sender_psid, sendText) { await sendText(sender_psid, `Specify mod and new details.\nFormat: Mod [ID], Description: New desc, Price: 150, Image: http://link`); stateManager.setUserState(sender_psid, 'awaiting_edit_mod'); }
async function processEditMod(sender_psid, text, sendText) { try { const parts = text.split(',').map(p => p.trim()); const modId = parseInt(parts.shift().replace('mod', '').trim()); if (isNaN(modId) || !(await db.getModById(modId))) throw new Error("Invalid Mod ID."); const detailsToUpdate = {}; parts.forEach(part => { const [key, ...valueParts] = part.split(':'); const value = valueParts.join(':').trim(); const keyLower = key.trim().toLowerCase(); if (['description', 'price', 'image_url'].includes(keyLower)) { detailsToUpdate[keyLower] = keyLower === 'price' ? parseFloat(value) : value; } }); if (Object.keys(detailsToUpdate).length === 0) throw new Error("No valid details provided."); await db.updateModDetails(modId, detailsToUpdate); await sendText(sender_psid, `Mod ${modId} updated successfully.`); } catch (e) { await sendText(sender_psid, `Invalid format. Error: ${e.message}`); } finally { stateManager.clearUserState(sender_psid); } }
async function promptForAddRef(sender_psid, sendText) { await sendText(sender_psid, `Provide ref, user ID, and mod ID.\nFormat: [ref_number], [user_id], Mod [ID]`); stateManager.setUserState(sender_psid, 'awaiting_add_ref'); }
async function processAddRef(sender_psid, text, sendText) { try { const [ref, userId, modIdStr] = text.split(',').map(p => p.trim()); const modId = parseInt(modIdStr.replace('mod', '').trim()); if (!/^\d{13}$/.test(ref) || !userId || isNaN(modId) || !(await db.getModById(modId))) throw new Error("Invalid format or ID."); await db.addReference(ref, userId, modId); await sendText(sender_psid, "Reference number added successfully."); } catch (e) { await sendText(sender_psid, `Could not add reference. It might already exist. Error: ${e.message}`); } finally { stateManager.clearUserState(sender_psid); } }
async function promptForEditAdmin(sender_psid, sendText) { await sendText(sender_psid, `Provide new admin info.\nFormat: Facebook ID: [New ID], GCash Number: [New Number]`); stateManager.setUserState(sender_psid, 'awaiting_edit_admin'); }
async function processEditAdmin(sender_psid, text, sendText) { try { const parts = text.split(',').map(p => p.trim()); const newAdminId = parts.find(p => p.toLowerCase().startsWith('facebook id:')).split(':')[1].trim(); const newGcash = parts.find(p => p.toLowerCase().startsWith('gcash number:')).split(':')[1].trim(); if (!newAdminId || !newGcash) throw new Error("Missing details."); await db.updateAdminInfo(newAdminId, newGcash); await sendText(sender_psid, "Admin info updated successfully."); } catch (e) { await sendText(sender_psid, `Invalid format. Error: ${e.message}`); } finally { stateManager.clearUserState(sender_psid); } }
async function promptForEditRef(sender_psid, sendText) { await sendText(sender_psid, `Provide the ref number and the new mod ID.\nFormat: [ref_number], Mod [ID]`); stateManager.setUserState(sender_psid, 'awaiting_edit_ref'); }
async function processEditRef(sender_psid, text, sendText) { try { const [ref, modIdStr] = text.split(',').map(p => p.trim()); const newModId = parseInt(modIdStr.replace('mod', '').trim()); if (!/^\d{13}$/.test(ref) || !(await db.getReference(ref))) throw new Error("Invalid ref number."); if (isNaN(newModId) || !(await db.getModById(newModId))) throw new Error("Invalid Mod ID."); await db.updateReferenceMod(ref, newModId); await sendText(sender_psid, `Reference ${ref} updated to Mod ${newModId}.`); } catch (e) { await sendText(sender_psid, `Invalid format. Error: ${e.message}`); } finally { stateManager.clearUserState(sender_psid); } }
async function promptForAddMod(sender_psid, sendText) { await sendText(sender_psid, `Provide the new mod details.\nFormat: ID, Name, Description, Price, ImageURL\n\nExample: 1, VIP Mod, Unlocks all features, 250, http://image.link/vip.png`); stateManager.setUserState(sender_psid, 'awaiting_add_mod'); }
async function processAddMod(sender_psid, text, sendText) { try { const [id, name, description, price, imageUrl] = text.split(',').map(p => p.trim()); const modId = parseInt(id); const modPrice = parseFloat(price); if (isNaN(modId) || !name || isNaN(modPrice)) throw new Error("ID, Name, and Price are required and must be the correct format."); await db.addMod(modId, name, description, modPrice, imageUrl); await sendText(sender_psid, `✅ Mod ${modId} (${name}) created successfully!`); } catch (e) { await sendText(sender_psid, `❌ Could not create mod. It might already exist or the format was wrong.\nError: ${e.message}`); } finally { stateManager.clearUserState(sender_psid); } }
module.exports = { showAdminMenu, handleViewReferences, promptForBulkAccounts, processBulkAccounts, promptForEditMod, processEditMod, promptForAddRef, processAddRef, promptForEditAdmin, processEditAdmin, promptForEditRef, processEditRef, promptForAddMod, processAddMod };