# Node.js dependencies folder
node_modules```

---

### File 4: `state_manager.js`

This file manages the user's conversation state and handles the 30-minute timeout.

```javascript
// state_manager.js
// Handles user conversation states with a built-in timeout.

const userStates = {};

// 30 minutes in milliseconds (30 * 60 * 1000)
const CONVERSATION_TIMEOUT = 1800000;

/**
 * Sets the state for a user, including a timestamp for timeout tracking.
 * @param {string} psid The user's Page-Scoped ID.
 * @param {string} state The name of the state (e.g., 'in_chat').
 * @param {object} data Any data to associate with the state (e.g., { model: 'grok' }).
 */
const setUserState = (psid, state, data = {}) => {
  userStates[psid] = {
    state,
    ...data,
    timestamp: Date.now() // Record the time of this interaction
  };
  console.log(`State set for ${psid}:`, userStates[psid]);
};

/**
 * Retrieves a user's state, but only if it has not expired.
 * @param {string} psid The user's Page-Scoped ID.
 * @returns {object|null} The user's state object, or null if it has timed out or doesn't exist.
 */
const getUserState = (psid) => {
  const userState = userStates[psid];

  if (!userState) {
    return null; // No state exists
  }

  const timeElapsed = Date.now() - userState.timestamp;

  // Check if the state has expired
  if (timeElapsed > CONVERSATION_TIMEOUT) {
    console.log(`State for ${psid} has expired. Clearing state.`);
    delete userStates[psid]; // Clear the expired state
    return null;
  }

  // State is valid, return it
  return userState;
};

/**
 * Manually clears a user's state.
 * @param {string} psid The user's Page-Scoped ID.
 */
const clearUserState = (psid) => {
  console.log(`State cleared for ${psid}.`);
  delete userStates[psid];
};

module.exports = {
  setUserState,
  getUserState,
  clearUserState,
};
