// user_handler.js
const db = require('./database');
const stateManager = require('./state_manager');
async function showUserMenu(sender_psid, sendText) { const menu = `Welcome! Please select an option:\nType 1: View available mods\nType 2: Submit a GCash reference number for a replacement account\nType 3: Check remaining replacement accounts\nType 4: Request a replacement account\nType 5: Contact the admin`; await sendText(sender_psid, menu); stateManager.clearUserState(sender_psid); }
async function handleViewMods(sender_psid, sendText) { const mods = await db.getMods(); if (!mods || mods.length === 0) return sendText(sender_psid, "There are currently no mods available.\nTo return to the menu, type \"Menu\"."); let response = "Available Mods:\n\n"; mods.forEach(mod => { response += `Mod ${mod.id}: ${mod.description || 'N/A'}\nPrice: ${mod.price} PHP | Stock: ${mod.stock}\nImage: ${mod.image_url || 'N/A'}\n\n`; }); response += `To purchase, type "Want Mod [Number]" (e.g., Want Mod 1).\nTo return to the menu, type "Menu".`; await sendText(sender_psid, response); stateManager.setUserState(sender_psid, 'awaiting_want_mod'); }
async function handleWantMod(sender_psid, text, sendText) { const modId = parseInt(text.replace('want mod', '').trim()); if (isNaN(modId)) return sendText(sender_psid, "Invalid format. Please type 'Want Mod [Number]'."); const mod = await db.getModById(modId); if (!mod) return sendText(sender_psid, "Invalid mod number. Please select a valid mod from the list."); const adminInfo = await db.getAdminInfo(); const gcashNumber = adminInfo?.gcash_number || "not set by admin"; await sendText(sender_psid, `You selected Mod ${mod.id}. Please send payment of ${mod.price} PHP to this GCash number: ${gcashNumber}.\nAfter payment, send the receipt or reference number to proceed.`); stateManager.setUserState(sender_psid, 'awaiting_payment_for_mod', { modId: mod.id }); }
async function promptForRefSubmit(sender_psid, sendText) { await sendText(sender_psid, "Please provide the 13-digit GCash reference number from your receipt."); stateManager.setUserState(sender_psid, 'awaiting_ref_for_submit'); }
async function processRefForSubmit(sender_psid, refNumber, sendText) { if (!/^\d{13}$/.test(refNumber)) return sendText(sender_psid, "Invalid reference number. Please provide a valid 13-digit number, or type 'Menu'."); await sendText(sender_psid, "Reference number accepted. Which mod did you purchase with this transaction? (e.g., Mod 1, Mod 2)"); stateManager.setUserState(sender_psid, 'awaiting_mod_for_submit', { refNumber }); }
async function processModForSubmit(sender_psid, text, sendText) { const modId = parseInt(text.replace('mod', '').trim()); const { refNumber } = stateManager.getUserState(sender_psid); if (isNaN(modId) || !(await db.getModById(modId))) return sendText(sender_psid, "Invalid mod. Please specify a valid mod number (e.g., 1, 2)."); try { await db.addReference(refNumber, sender_psid, modId); await sendText(sender_psid, "Reference number and mod saved successfully!\nTo return to the menu, type \"Menu\"."); } catch (e) { await sendText(sender_psid, "This reference number has already been submitted."); } finally { stateManager.clearUserState(sender_psid); } }
async function promptForCheckClaims(sender_psid, sendText) { await sendText(sender_psid, "Please provide your 13-digit GCash reference number to check remaining replacement accounts."); stateManager.setUserState(sender_psid, 'awaiting_ref_for_check'); }
async function processCheckClaims(sender_psid, refNumber, sendText) { if (!/^\d{13}$/.test(refNumber)) return sendText(sender_psid, "Invalid reference number format."); const ref = await db.getReference(refNumber); if (!ref) { await sendText(sender_psid, "This reference number was not found."); } else { const remaining = ref.claims_max - ref.claims_used; await sendText(sender_psid, `You have ${remaining} replacement account(s) left for Mod ${ref.mod_id} (${ref.mod_name}).`); } stateManager.clearUserState(sender_psid); }
async function promptForReplacement(sender_psid, sendText) { await sendText(sender_psid, "Please provide your 13-digit GCash reference number to request a replacement account."); stateManager.setUserState(sender_psid, 'awaiting_ref_for_replacement'); }
async function processReplacementRequest(sender_psid, refNumber, sendText) { if (!/^\d{13}$/.test(refNumber)) return sendText(sender_psid, "Invalid reference number format."); const ref = await db.getReference(refNumber); if (!ref || ref.claims_used >= ref.claims_max) { await sendText(sender_psid, "No replacement accounts available for this reference number."); stateManager.clearUserState(sender_psid); return; } const account = await db.getAvailableAccount(ref.mod_id); if (!account) { await sendText(sender_psid, "Sorry, no replacement accounts are in stock for your mod. Please contact an admin."); stateManager.clearUserState(sender_psid); return; } await db.claimAccount(account.id); await db.useClaim(ref.ref_number); await sendText(sender_psid, `Here is your replacement account for Mod ${ref.mod_id}:\nUsername: \`${account.username}\`\nPassword: \`${account.password}\``); stateManager.clearUserState(sender_psid); }
async function promptForAdminMessage(sender_psid, sendText) { await sendText(sender_psid, "Please provide your message for the admin, and it will be forwarded."); stateManager.setUserState(sender_psid, 'awaiting_admin_message'); }
async function forwardMessageToAdmin(sender_psid, text, sendText, ADMIN_ID) { const forwardMessage = `Message from user ${sender_psid}:\n\n"${text}"`; await sendText(ADMIN_ID, forwardMessage); await sendText(sender_psid, "Your message has been sent to the admin. You will be contacted soon."); stateManager.clearUserState(sender_psid); }
module.exports = { showUserMenu, handleViewMods, handleWantMod, promptForRefSubmit, processRefForSubmit, processModForSubmit, promptForCheckClaims, processCheckClaims, promptForReplacement, processReplacementRequest, promptForAdminMessage, forwardMessageToAdmin };